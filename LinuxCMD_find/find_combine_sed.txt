########### B. find and replace string in multiple files: find combine sed #################

find /root -type f -exec sed -i 's/test\.com/new/g' {} \;

 -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an  argument
              consisting  of  ‘;’ is encountered.  The string ‘{}’ is replaced by the current file name being processed everywhere it occurs in the argu-
              ments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need  to  be
              escaped  (with a ‘\’) or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec
              option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are  unavoid-
              able security problems surrounding use of the -exec action; you should use the -execdir option instead.
			  
find . -type f -exec file '{}' \;

       Runs ‘file’ on every file in or below the current directory.  Notice that the braces are enclosed in single  quote  marks  to  protect  them  from
       interpretation  as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been
       used in that case also.

____________________________

Example:
 Find and replace string:
1. Find and Print the changes before apply: sed -e:
[root@nobody ~]# find /root/test_all/ -type f -exec sed -e 's/test\.com/test\.co/g' {} \;
#This is test 2
test.co/a?
test.co/b?
test.co/c?

#This is test 3
test.co/g?
test.co/h?
test.co/i?

2.Apply the change: sed -i:

[root@nobody ~]# find /root/test_all/ -type f -exec sed -i 's/test\.com/test\.co/g' {} \;

[root@nobody ~]# cat /root/test_all/test/test.cfg /root/test_all/test2/test.cfg 
#This is test 2
test.co/a?
test.co/b?
test.co/c?

#This is test 3
test.co/g?
test.co/h?
test.co/i?