===To append a line after last line===
$ sed '$ a This is the last line' sedtest.txt
This is line #1
This is line #2
This is line #3
This is line #4
This is line #5
This is line #6
This is line #7
This is line #8
This is line #9
This is line #10
This is the last line

Lets check it for the latest command we have run to append lines after the last line of the file. Has it made any changes to the file?

$ cat sedtest.txt
This is line #1
This is line #2
This is line #3
This is line #4
This is line #5
This is line #6
This is line #7
This is line #8
This is line #9
This is line #10

No, the original file remains the same. But, I wanted to save the changes to the file. So, I should have used the option -i.

$ sed -i '$ a This is the last line' sedtest.txt
$ cat sedtest.txt
This is line #1
This is line #2
This is line #3
This is line #4
This is line #5
This is line #6
This is line #7
This is line #8
This is line #9
This is line #10
This is the last line
------------------------------
to change only the second match word ( to replace Allow,Deny with Deny,Allow )

Sample tmp_file:

Allow,Deny
Allow,Deny
Allow,Deny
Allow,Deny

# sed ':a;N;$!ba; s/Allow,Deny/Deny,Allow/2' tmp_file
	: introduces a label.  
	b branches to a label. 
	$! is an address that matches all but the last line.  
	:a;N;$!ba; is a loop which joins lines (using N) until it gets to the last line.
	2: second match

The output:

Allow,Deny
Deny,Allow
Allow,Deny
Allow,Deny

######### A. Print the change before truely edit: sed -e + sed -i #######################

sed -e '/test\.com/s/$/?/' /root/test/test.cfg ./test2/test.cfg
	/test\.com/ search the line with this string,
	s substitute,
	/$ end of line,
	/?/ add this string
	/root/test/test.cfg =>> Path to the file, can be multiple file /Path1/ /Path2/
	
=>> if it looks OK, add -i to edit in place.
=>> Purpose: Add string to the end of line in file <<==

Example:
1.Before edit:
[root@nobody ~]# cat /root/test/test.cfg /root/test2/test.cfg
#This is test 2
test.com/a
test.com/b
test.com/c

#This is test 3
test.com/g
test.com/h
test.com/i

2.Print the changes before apply: sed -e
[root@nobody ~]# sed -e '/test\.com/s/$/?/' /root/test/test.cfg /root/test2/test.cfg 
#This is test 2
test.com/a?
test.com/b?
test.com/c?

#This is test 3
test.com/g?
test.com/h?
test.com/i?

3.Apply the change: sed -i
[root@nobody ~]# sed -i '/test\.com/s/$/?/' /root/test/test.cfg /root/test2/test.cfg 
[root@nobody ~]# cat /root/test/test.cfg /root/test2/test.cfg
#This is test 2
test.com/a?
test.com/b?
test.com/c?

#This is test 3
test.com/g?
test.com/h?
test.com/i?

__________________________________
########### B. find and replace string in multiple files: find combine sed #################

find /root -type f -exec sed -i 's/test\.com/new/g' {} \;

 -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an  argument
              consisting  of  ‘;’ is encountered.  The string ‘{}’ is replaced by the current file name being processed everywhere it occurs in the argu-
              ments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need  to  be
              escaped  (with a ‘\’) or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec
              option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are  unavoid-
              able security problems surrounding use of the -exec action; you should use the -execdir option instead.
			  
find . -type f -exec file '{}' \;

       Runs ‘file’ on every file in or below the current directory.  Notice that the braces are enclosed in single  quote  marks  to  protect  them  from
       interpretation  as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been
       used in that case also.

____________________________

Example:
 Find and replace string:
1. Find and Print the changes before apply: sed -e:
[root@nobody ~]# find /root/test_all/ -type f -exec sed -e 's/test\.com/test\.co/g' {} \;
#This is test 2
test.co/a?
test.co/b?
test.co/c?

#This is test 3
test.co/g?
test.co/h?
test.co/i?

2.Apply the change: sed -i:

[root@nobody ~]# find /root/test_all/ -type f -exec sed -i 's/test\.com/test\.co/g' {} \;

[root@nobody ~]# cat /root/test_all/test/test.cfg /root/test_all/test2/test.cfg 
#This is test 2
test.co/a?
test.co/b?
test.co/c?

#This is test 3
test.co/g?
test.co/h?
test.co/i?	
_______________________________

########### C. find and add string to the end of line in multiple files: find combine sed #################

***Can only possible with BashScript****

Advance: User input /Path/ in find command, and string to grep 

Path file= find /root/test_all/ -type f | grep -ir test.co | cut -d ':' -f1 | grep -v "^\." | awk '!a[$0]++'

for i in Path

	execute command:

		sed -e '/test\.co/s/$/?/' $i {} \;

if user confirm Yes then execute:

	sed -i '/test\.co/s/$/?/' $i {} \;
